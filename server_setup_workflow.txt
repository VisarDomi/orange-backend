local computer


end local computer



server computer

1. login:
ssh root@46.101.147.93
Password:
21407f77f006454b343bf000d1

2. create user ubuntu:
adduser --gecos "" ubuntu
password: password
usermod -aG sudo ubuntu
su ubuntu

3. create ssh keys with no password:
ssh-keygen

4. add public keys of people so they can enter to the server with ssh. tip: you can make those keys by typing ssh-keygen into git bash:
echo ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC0ssiRxRsqwt4us+EfpJYuCrLlox/9lbyOBEu5Bkuf67Rh3WlzlTv113GM5YANusReJLhEM1l3rmhi6l2ELIs6bPh0vE92Z01J3CfF9QGG47U4DkauoAjzBhM5BOFz922vbAXTdJ/6VFG5Y8b/mz7cAS7MUMJ90b0Kz0l9TKoRZSawmO9gbhuPjSk/TBe+LoWSrPCXFhOeL4/BVGYWeoVk+bbsfjud1lYPDcD2RWC0olp2Zw/c6sYQGNdzTNVyMXUFZpMygn8KVbBWvTliujLhdUNei6eY3bLBiXrXeEY3wxFBcuQcM2HSovcOMj0K+HmaZdkMS5LjNr06Q/4/5IPl visar@DESKTOP-F8LD6IB >> ~/.ssh/authorized_keys
chmod 600 ~/.ssh/authorized_keys

5. logout of server (exit, exit) and login again with:
ssh ubuntu@46.101.147.93

6. remove ubuntu password:
sudo visudo

7. write at the end of file:
# Remove password for user ubuntu
ubuntu ALL=(ALL) NOPASSWD: ALL

!warning: do the following 3 steps at the same session, or you will need to reformat the server
8.1. removing password login:
sudo nano /etc/ssh/sshd_config

8.2. change these values from yes to no:
PermitRootLogin no
PasswordAuthentication no

8.3. install ufw firewall:
sudo apt-get install -y ufw
sudo ufw allow ssh
sudo ufw allow http
sudo ufw allow 443/tcp
sudo ufw --force enable
sudo ufw status


9. install some things on server (but not mysql) with default values:
sudo apt-get -y update
sudo apt-get -y install python3 python3-venv python3-dev
sudo apt-get -y install postfix supervisor nginx git


10. clone the repository in home/ubuntu:
go to orange-backend in bitbucket and select clone and select https and copy it

11. paste it in server:
git clone https://VisarDomi@bitbucket.org/verweb/orange-backend.git
cd orange-backend

12. sudo apt install pipenv

13. delete Pipfile.lock
rm -rf Pipfile.lock

14. pipenv shell

15-21. pipenv install

22. copy paste env_local to .env:
cp env_local .env

23. add FLASK_APP environment variable:
echo "export FLASK_APP=orange.py" >> ~/.profile

24. Login and logout from server:
exit
ssh ubuntu@46.101.147.93
cd orange-backend
pipenv shell

25. install postgres:
sudo apt install -y postgresql postgresql-contrib

change password for postgres:
26.1.a edit file:
sudo nano /etc/postgresql/11/main/pg_hba.conf

change line from peer to trust:
local   all             postgres                                peer
to:
local   all             postgres                                trust

26.1.b
sudo service postgresql restart

26.2 changing password:
psql -U postgres
ALTER USER postgres with password 'postgres';

26.3.a change line from trust to md5:
local   all             postgres                                trust
to:
local   all             postgres                                md5

26.3.b
sudo service postgresql restart


27. Login and logout from server:
exit
ssh ubuntu@46.101.147.93
cd orange-backend
pipenv shell

28. Login with password 'postgres':
psql -U postgres
create database orange;
\q

29.1 upgrade database:
alembic upgrade head

29.2 create admin:
flask shell
copy paste from after_resetting_database.py

Setup supervisorctl:
30.1 open file:
sudo nano /etc/supervisor/conf.d/orange.conf

30.2 paste the following:
[program:orange]
command=/home/ubuntu/.virtualenvs/orange-backend-XuJsFZXp/bin/gunicorn -b localhost:5000 -w 4 orange:app
directory=/home/ubuntu/orange-backend
user=ubuntu
autostart=true
autorestart=true
stopasgroup=true
killasgroup=true

31. reload supervisorctl:
sudo supervisorctl start orange
sudo supervisorctl reload

Setup nginx:
32.1 make temp certificates:
mkdir certs
openssl req -new -newkey rsa:4096 -days 365 -nodes -x509 -keyout certs/key.pem -out certs/cert.pem


32.2 remove default config if it exists:
sudo rm /etc/nginx/sites-enabled/default

32.3 add config:
sudo nano /etc/nginx/sites-enabled/orange

32.4 copy paste the following into the file:

server {
    # listen on port 80 (http)
    listen 80;
    server_name orange-backend.ml;
    location / {
        # redirect any requests to the same URL but on https
        return 301 https://$host$request_uri;
    }
}
server {
    # listen on port 443 (https)
    listen 443 ssl;
    server_name orange-backend.ml;

    # location of the self-signed SSL certificate
    ssl_certificate /home/ubuntu/orange-backend/certs/cert.pem;
    ssl_certificate_key /home/ubuntu/orange-backend/certs/key.pem;

    # write access and error logs to /var/log
    access_log /var/log/orange_access.log;
    error_log /var/log/orange_error.log;

    location / {
        # forward application requests to the gunicorn server
        proxy_pass http://localhost:5000;
        proxy_redirect off;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    }

    location /static {
        # handle static files directly, without forwarding to the application
        alias /home/ubuntu/orange-backend/static;
    }
}

33. reload nginx:
sudo service nginx start
sudo service nginx reload

Site is online (unsafe connection) at 46.101.147.93

Real certificates with auto renewal:
34. at freenom.com go to:
services -> my domains -> orange-backend.ml -> manage domains -> manage freedom dns -> add records

35. at target add the ip address:
Name	Type	TTL	  Target
A     3600  46.101.147.93
save changes

36. Install certbot:
sudo apt-get update

sudo apt-get install -y software-properties-common

sudo add-apt-repository universe

sudo add-apt-repository ppa:certbot/certbot
press enter to continue

sudo apt-get update

sudo apt-get install -y python-certbot-nginx

37. get certificate:
sudo certbot --nginx
enter domain name: orange-backend.ml
choose: redirect
autorenew is on by default

38. remove temp certs:
rm -rf certs

39. now site is live at:
https://orange-backend.ml

40. Deploying updates:

git pull
sudo supervisorctl stop orange
alembic upgrade head
sudo supervisorctl start orange

end server computer
